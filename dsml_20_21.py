# -*- coding: utf-8 -*-
"""DSML PRAC ASS20-21.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gbF8oYKUGkCKLx3TaELVuksUgpXvKLwA

Write a program to cluster a set of points using K-means for IRIS
dataset. Consider, K=3, clusters. Consider Euclidean distance as the
distance measure. Randomly initialize a cluster mean as one of the data
points. Iterate at least for 10 iterations. After iterations are over, print the
final cluster means for each of the clusters.
"""

import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

df = pd.read_csv("/content/IRIS.csv")
df

df.columns

x = df['sepal_length']
x = list(x)
y = df['sepal_width']
y = list(y)
print(type(x))

plt.scatter(x,y,)

kmeans = KMeans(n_clusters = 3)
data = list(zip(x,y))
kmeans.fit(data)

plt.scatter(x,y,c = kmeans.labels_)
plt.show()

print(kmeans.labels_)

c1 = []
c2 = []
c3 = []

for i in range(len(x)):
  if kmeans.labels_[i] == 0:
    c1.append((x[i] , y[i]))
  elif kmeans.labels_[i] == 1:
    c2.append((x[i] , y[i]))
  if kmeans.labels_[i] == 2:
    c3.append((x[i] , y[i]))


print("Cluster 1: " , c1)
print("Cluster 2: " , c2)
print("Cluster 3: " , c3)

kmeans1 = KMeans(n_clusters = 4)
data = list(zip(x,y))
kmeans1.fit(data)

plt.scatter(x,y,c = kmeans1.labels_)
plt.show()

print(kmeans1.labels_)